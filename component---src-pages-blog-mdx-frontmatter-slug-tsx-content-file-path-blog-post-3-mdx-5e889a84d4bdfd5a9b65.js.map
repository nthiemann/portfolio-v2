{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-tsx-content-file-path-blog-post-3-mdx-5e889a84d4bdfd5a9b65.js","mappings":"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","sources":["webpack://portfolio-v2/./blog/post-3.mdx","webpack://portfolio-v2/./src/pages/blog/{mdx.frontmatter__slug}.tsx","webpack://portfolio-v2/./src/components/BlogBodyEl/blogbodyel.tsx","webpack://portfolio-v2/./src/components/BlogBodyEl/blogbodyel.module.css","webpack://portfolio-v2/./src/components/Layout/layout.tsx","webpack://portfolio-v2/./src/components/Layout/layout.module.css","webpack://portfolio-v2/./src/components/Navbar/navbar.module.css","webpack://portfolio-v2/./src/components/Navbar/navbar.tsx","webpack://portfolio-v2/./src/components/Seo/seo.tsx","webpack://portfolio-v2/./src/components/Typography/typography.tsx","webpack://portfolio-v2/./src/components/Typography/typography.module.css","webpack://portfolio-v2/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"Wow look at all this content. How do they do it?\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/nickt/Development/Projects/portfolio-v2/blog/post-3.mdx\";\nimport * as React from \"react\";\nimport Layout from \"../../components/Layout/layout\";\nimport Seo from \"../../components/Seo/seo\";\nimport Typography from \"../../components/Typography/typography\";\nimport BlogBodyEl from \"../../components/BlogBodyEl/blogbodyel\";\nconst BlogPost = _ref => {\n  var _data$mdx$frontmatter, _data$mdx, _data$mdx$frontmatter2, _data$mdx2, _data$mdx2$frontmatte;\n  let {data, children} = _ref;\n  return React.createElement(Layout, {\n    pageTitle: (_data$mdx$frontmatter = data === null || data === void 0 ? void 0 : (_data$mdx = data.mdx) === null || _data$mdx === void 0 ? void 0 : (_data$mdx$frontmatter2 = _data$mdx.frontmatter) === null || _data$mdx$frontmatter2 === void 0 ? void 0 : _data$mdx$frontmatter2.title) !== null && _data$mdx$frontmatter !== void 0 ? _data$mdx$frontmatter : undefined\n  }, (data === null || data === void 0 ? void 0 : (_data$mdx2 = data.mdx) === null || _data$mdx2 === void 0 ? void 0 : (_data$mdx2$frontmatte = _data$mdx2.frontmatter) === null || _data$mdx2$frontmatte === void 0 ? void 0 : _data$mdx2$frontmatte.date) && React.createElement(Typography, null, data.mdx.frontmatter.date), children);\n};\nconst query = \"3237460933\";\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = _ref2 => {\n  var _data$mdx$frontmatter3, _data$mdx3, _data$mdx3$frontmatte;\n  let {data} = _ref2;\n  return React.createElement(React.Fragment, null, React.createElement(Seo, {\n    title: (_data$mdx$frontmatter3 = data === null || data === void 0 ? void 0 : (_data$mdx3 = data.mdx) === null || _data$mdx3 === void 0 ? void 0 : (_data$mdx3$frontmatte = _data$mdx3.frontmatter) === null || _data$mdx3$frontmatte === void 0 ? void 0 : _data$mdx3$frontmatte.title) !== null && _data$mdx$frontmatter3 !== void 0 ? _data$mdx$frontmatter3 : undefined\n  }), React.createElement(BlogBodyEl, null));\n};\n","import React from \"react\";\nimport { background } from \"./blogbodyel.module.css\";\n\n/**\n * @description This exists as a common body that can be referenced by any HeadApi component.\n * It's to get around gatsby's trash way of handling this tag.\n * @returns a `<body>` element appropriately styled for all blog pages.\n */\nconst BlogBodyEl: React.FC = () => {\n  return <body className={background} />;\n};\n\nexport default BlogBodyEl;\n","// extracted by mini-css-extract-plugin\nexport var background = \"blogbodyel-module--background--def2a\";","import * as React from \"react\";\nimport Navbar from \"../Navbar/navbar\";\nimport { container, heading } from \"./layout.module.css\";\nimport Typography from \"../Typography/typography\";\nimport * as CSS from \"csstype\";\n\ntype LayoutProps = {\n  children: React.ReactNode;\n  pageTitle?: string;\n  maxWidth?: CSS.Properties[\"maxWidth\"];\n};\n\n/**\n *\n * @description Standard common page layout with title and styling\n * @param pageTitle The title to render at the top of the page\n * @param maxWidth The maximum width, in pixels, of the page content.\n */\nconst Layout: React.FC<LayoutProps> = ({ pageTitle, maxWidth, children }) => {\n  return (\n    <div>\n      <Navbar />\n      <main\n        className={container}\n        style={maxWidth != undefined ? { maxWidth } : undefined}\n      >\n        {pageTitle && (\n          <Typography className={heading} variant=\"h1\">\n            {pageTitle}\n          </Typography>\n        )}\n        {children}\n      </main>\n    </div>\n  );\n};\n\nexport default Layout;\n","// extracted by mini-css-extract-plugin\nexport var container = \"layout-module--container--66d73\";\nexport var heading = \"layout-module--heading--037a1\";\nexport var page = \"layout-module--page--c7c81\";","// extracted by mini-css-extract-plugin\nexport var gitIcon = \"navbar-module--git-icon--b205c\";\nexport var iconContainer = \"navbar-module--icon-container--609ac\";\nexport var navLinkItem = \"navbar-module--nav-link-item--24d96\";\nexport var navLinks = \"navbar-module--nav-links--d8aac\";","import { Link } from \"gatsby\";\nimport * as React from \"react\";\nimport { navLinks, navLinkItem, gitIcon } from \"./navbar.module.css\";\nimport Typography from \"../Typography/typography\";\nimport GithubIcon from \"../assets/github-mark-white.svg\";\nimport config from \"../../../config.json\";\n\nconst GITHUB_LINK = config.github_link;\n\nconst Navbar: React.FC = () => {\n  return (\n    <nav>\n      <ul className={navLinks}>\n        <li className={navLinkItem}>\n          <Link to=\"/\">\n            <Typography>Home</Typography>\n          </Link>\n        </li>\n        <li className={navLinkItem}>\n          <Link to=\"/blog\">\n            <Typography>Blog</Typography>\n          </Link>\n        </li>\n        <li>\n          <a href={GITHUB_LINK} target=\"_blank\" rel=\"noopener noreferrer\">\n            {/* <GithubIcon className={gitIcon}></GithubIcon> */}\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import * as React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\ntype SeoProps = {\n  title?: string;\n};\n\nconst Seo: React.FC<SeoProps> = ({ title }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <title>\n      {title} | {data.site.siteMetadata.title}\n    </title>\n  );\n};\n\nexport default Seo;\n","import React, { ReactNode } from \"react\";\nimport { light, dark } from \"./typography.module.css\";\n\ntype Variant = \"p\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n\ntype TypographyProps = {\n  variant?: Variant;\n  color?: \"light\" | \"dark\";\n  children: ReactNode;\n} & React.HTMLProps<HTMLElement>;\n\nconst colorMappings = {\n  light: light,\n  dark: dark,\n};\n\nconst Typography: React.FC<TypographyProps> = ({\n  variant = \"p\",\n  color = \"light\",\n  children,\n  ...rest\n}) => {\n  const variantEl = variant as keyof JSX.IntrinsicElements; // Ensure variant is a valid HTML tag\n\n  return React.createElement(\n    variantEl,\n    { className: colorMappings[color], ...rest },\n    children\n  );\n};\n\nexport default Typography;\n","// extracted by mini-css-extract-plugin\nexport var dark = \"typography-module--dark--fe94f\";\nexport var light = \"typography-module--light--75169\";","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","BlogPost","_ref","_data$mdx$frontmatter","_data$mdx","_data$mdx$frontmatter2","_data$mdx2","_data$mdx2$frontmatte","data","children","Layout","pageTitle","mdx","frontmatter","title","undefined","date","Typography","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref2","_data$mdx$frontmatter3","_data$mdx3","_data$mdx3$frontmatte","Seo","BlogBodyEl","className","maxWidth","Navbar","style","variant","navLinkItem","GITHUB_LINK","config","Link","to","href","target","rel","useStaticQuery","site","siteMetadata","colorMappings","light","dark","color","rest","variantEl","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}