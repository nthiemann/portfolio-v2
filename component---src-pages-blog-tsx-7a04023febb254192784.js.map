{"version":3,"file":"component---src-pages-blog-tsx-7a04023febb254192784.js","mappings":"mLAqCA,MAnBsCA,IAAwC,IAAvC,UAAEC,EAAS,SAAEC,EAAQ,SAAEC,GAAU,EACtE,OACEC,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAACC,EAAAA,EAAM,MACPD,EAAAA,cAAAA,OAAAA,CACEE,UCtBe,kCDuBfC,MAAmBC,MAAZN,EAAwB,CAAEA,iBAAaM,GAE7CP,GACCG,EAAAA,cAACK,EAAAA,EAAU,CAACH,UCzBD,gCDyBqBI,QAAQ,MACrCT,GAGJE,GAEC,C,+EE9BCQ,EAAc,sC,UCIzB,MAAMC,E,QAAcC,GA0BpB,MAxByBR,IAErBD,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,KAAAA,CAAIE,UDRY,mCCSdF,EAAAA,cAAAA,KAAAA,CAAIE,UAAWK,GACbP,EAAAA,cAACU,EAAAA,GAAI,CAACC,GAAG,KACPX,EAAAA,cAACK,EAAAA,EAAU,KAAC,UAGhBL,EAAAA,cAAAA,KAAAA,CAAIE,UAAWK,GACbP,EAAAA,cAACU,EAAAA,GAAI,CAACC,GAAG,SACPX,EAAAA,cAACK,EAAAA,EAAU,KAAC,UAGhBL,EAAAA,cAAAA,KAAAA,KACEA,EAAAA,cAAAA,IAAAA,CAAGY,KAAMJ,EAAaK,OAAO,SAASC,IAAI,0B,+CCCpD,IAlBgClB,IAAgB,IAAf,MAAEmB,GAAO,EACxC,MAAMC,GAAOC,EAAAA,EAAAA,IAAe,cAU5B,OACEjB,EAAAA,cAAAA,QAAAA,KACGe,EAAM,MAAIC,EAAKE,KAAKC,aAAaJ,MAC5B,C,qECVZ,MAAMK,EAAgB,CACpBC,MCViB,kCDWjBC,KCZgB,kCD8BlB,MAf8C1B,IAKvC,IALwC,QAC7CU,EAAU,IAAG,MACbiB,EAAQ,QAAO,SACfxB,KACGyB,GACJ,EACC,MAAMC,EAAYnB,EAElB,OAAON,EAAAA,cACLyB,EACA,CAAEvB,UAAWkB,EAAcG,MAAWC,GACtCzB,EACD,C,sHEtBH,MAAM2B,EAAsC,CAC1CC,OAAQ,WAgBV,MAdkC/B,IAA4B,IAA3B,SAAEG,KAAayB,GAAM,EACtD,MAAMI,EAA4BxB,MAAhBoB,EAAKK,QAEvB,OACE7B,EAAAA,cAAAA,MAAAA,OAAAA,OAAAA,CACEE,UCbY,2BDcZC,MAAOyB,EAAYF,OAAiBtB,GAChCoB,GAEHzB,EACG,E,oBEeV,MAtBgDH,IAKzC,IAL0C,MAC/CmB,EAAK,KACLe,EAAI,QACJC,EAAO,IACPC,GACD,EAKC,OACEhC,EAAAA,cAACiC,EAAI,CAACJ,QALYK,MAClBC,EAAAA,EAAAA,IAASH,EAAI,GAKXhC,EAAAA,cAAAA,UAAAA,KACGe,GAASf,EAAAA,cAACK,EAAAA,EAAU,CAACC,QAAQ,MAAMS,GACnCe,GAAQ9B,EAAAA,cAACK,EAAAA,EAAU,CAACC,QAAQ,KAAKwB,GACjCC,GAAW/B,EAAAA,cAACK,EAAAA,EAAU,CAACC,QAAQ,KAAKyB,IAGzC,E,oBCrBJ,MAAMK,EAAQ,aA4Cd,MA1C6DxC,IAAc,IAAb,KAAEoB,GAAM,EACpE,OACEhB,EAAAA,cAACqC,EAAAA,EAAM,CAACxC,UAAWuC,EAAOtC,SAAU,UACjCwC,EAAAA,EAAAA,GAAiB,cAChBtC,EAAAA,cAAAA,MAAAA,CAAKE,UCbc,qCDchBc,EAAKuB,OAAOC,MAAMC,KAAKC,IAAI,iBAC1B1C,EAAAA,cAAC2C,EAAW,CACVC,IAAKF,EAAKG,GACV9B,MAAuB,QAAlB,EAAE2B,EAAKI,mBAAW,aAAhBC,EAAkBhC,MACzBe,KAAsB,QAAlB,EAAEY,EAAKI,mBAAW,aAAhBE,EAAkBlB,KACxBC,QAASW,EAAKX,QACdC,IAAG,UAA2B,QAA3B,EAAWU,EAAKI,mBAAW,aAAhBG,EAAkBC,OAChC,KAINlD,EAAAA,cAAAA,MAAAA,CAAKE,UCxBW,mCDyBdF,EAAAA,cAACK,EAAAA,EAAU,CAACC,QAAQ,MAAK,iDAKtB,EAsBN,MAAM6C,EAAeA,IAExBnD,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAACoD,EAAAA,EAAG,CAACrC,MAAOqB,IACZpC,EAAAA,cAAAA,OAAAA,CAAME,UC1DY,mCD0DoB,I,qEEhDrC,SAASoC,EAAiBO,GAC/B,MAAMQ,EAAoC5C,EAAAA,GAE1C,KAAMoC,KAAMQ,GAAU,CACpB,MAAMC,EAAQ,sBAAyBT,EAAE,yBAEzC,MADAU,QAAQC,MAAMF,GACR,IAAIG,MAAMH,EAClB,CAEA,OAAOD,EAAQR,EACjB,C","sources":["webpack://portfolio-v2/./src/components/Layout/layout.tsx","webpack://portfolio-v2/./src/components/Layout/layout.module.css","webpack://portfolio-v2/./src/components/Navbar/navbar.module.css","webpack://portfolio-v2/./src/components/Navbar/navbar.tsx","webpack://portfolio-v2/./src/components/Seo/seo.tsx","webpack://portfolio-v2/./src/components/Typography/typography.tsx","webpack://portfolio-v2/./src/components/Typography/typography.module.css","webpack://portfolio-v2/./src/components/Card/card.tsx","webpack://portfolio-v2/./src/components/Card/card.module.css","webpack://portfolio-v2/./src/components/PostPreview/postpreview.tsx","webpack://portfolio-v2/./src/pages/blog.tsx","webpack://portfolio-v2/./src/pages/blog.module.css","webpack://portfolio-v2/./src/utils.ts"],"sourcesContent":["import * as React from \"react\";\nimport Navbar from \"../Navbar/navbar\";\nimport { container, heading } from \"./layout.module.css\";\nimport Typography from \"../Typography/typography\";\nimport * as CSS from \"csstype\";\n\ntype LayoutProps = {\n  children: React.ReactNode;\n  pageTitle?: string;\n  maxWidth?: CSS.Properties[\"maxWidth\"];\n};\n\n/**\n *\n * @description Standard common page layout with title and styling\n * @param pageTitle The title to render at the top of the page\n * @param maxWidth The maximum width, in pixels, of the page content.\n */\nconst Layout: React.FC<LayoutProps> = ({ pageTitle, maxWidth, children }) => {\n  return (\n    <div>\n      <Navbar />\n      <main\n        className={container}\n        style={maxWidth != undefined ? { maxWidth } : undefined}\n      >\n        {pageTitle && (\n          <Typography className={heading} variant=\"h1\">\n            {pageTitle}\n          </Typography>\n        )}\n        {children}\n      </main>\n    </div>\n  );\n};\n\nexport default Layout;\n","// extracted by mini-css-extract-plugin\nexport var container = \"layout-module--container--66d73\";\nexport var heading = \"layout-module--heading--037a1\";\nexport var page = \"layout-module--page--c7c81\";","// extracted by mini-css-extract-plugin\nexport var gitIcon = \"navbar-module--git-icon--b205c\";\nexport var iconContainer = \"navbar-module--icon-container--609ac\";\nexport var navLinkItem = \"navbar-module--nav-link-item--24d96\";\nexport var navLinks = \"navbar-module--nav-links--d8aac\";","import { Link } from \"gatsby\";\nimport * as React from \"react\";\nimport { navLinks, navLinkItem, gitIcon } from \"./navbar.module.css\";\nimport Typography from \"../Typography/typography\";\nimport GithubIcon from \"../assets/github-mark-white.svg\";\nimport config from \"../../../config.json\";\n\nconst GITHUB_LINK = config.github_link;\n\nconst Navbar: React.FC = () => {\n  return (\n    <nav>\n      <ul className={navLinks}>\n        <li className={navLinkItem}>\n          <Link to=\"/\">\n            <Typography>Home</Typography>\n          </Link>\n        </li>\n        <li className={navLinkItem}>\n          <Link to=\"/blog\">\n            <Typography>Blog</Typography>\n          </Link>\n        </li>\n        <li>\n          <a href={GITHUB_LINK} target=\"_blank\" rel=\"noopener noreferrer\">\n            {/* <GithubIcon className={gitIcon}></GithubIcon> */}\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import * as React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\ntype SeoProps = {\n  title?: string;\n};\n\nconst Seo: React.FC<SeoProps> = ({ title }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <title>\n      {title} | {data.site.siteMetadata.title}\n    </title>\n  );\n};\n\nexport default Seo;\n","import React, { ReactNode } from \"react\";\nimport { light, dark } from \"./typography.module.css\";\n\ntype Variant = \"p\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n\ntype TypographyProps = {\n  variant?: Variant;\n  color?: \"light\" | \"dark\";\n  children: ReactNode;\n} & React.HTMLProps<HTMLElement>;\n\nconst colorMappings = {\n  light: light,\n  dark: dark,\n};\n\nconst Typography: React.FC<TypographyProps> = ({\n  variant = \"p\",\n  color = \"light\",\n  children,\n  ...rest\n}) => {\n  const variantEl = variant as keyof JSX.IntrinsicElements; // Ensure variant is a valid HTML tag\n\n  return React.createElement(\n    variantEl,\n    { className: colorMappings[color], ...rest },\n    children\n  );\n};\n\nexport default Typography;\n","// extracted by mini-css-extract-plugin\nexport var dark = \"typography-module--dark--fe94f\";\nexport var light = \"typography-module--light--75169\";","import React from \"react\";\n\nimport { card } from \"./card.module.css\";\n\ntype CardProps = React.HTMLProps<HTMLDivElement>;\n\nconst clickableStyle: React.CSSProperties = {\n  cursor: \"pointer\",\n};\nconst Card: React.FC<CardProps> = ({ children, ...rest }) => {\n  const clickable = rest.onClick != undefined;\n\n  return (\n    <div\n      className={card}\n      style={clickable ? clickableStyle : undefined}\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport var card = \"card-module--card--f512c\";","import React from \"react\";\nimport Card from \"../Card/card\";\nimport { navigate } from \"gatsby\";\nimport Typography from \"../Typography/typography\";\n\ntype PostPreviewProps = {\n  title?: string | null;\n  date?: string | null;\n  excerpt?: string | null;\n  url: string;\n};\n\nconst PostPreview: React.FC<PostPreviewProps> = ({\n  title,\n  date,\n  excerpt,\n  url,\n}) => {\n  const handleClick = () => {\n    navigate(url);\n  };\n\n  return (\n    <Card onClick={handleClick}>\n      <article>\n        {title && <Typography variant=\"h2\">{title}</Typography>}\n        {date && <Typography variant=\"p\">{date}</Typography>}\n        {excerpt && <Typography variant=\"p\">{excerpt}</Typography>}\n      </article>\n    </Card>\n    // </div>\n  );\n};\n\nexport default PostPreview;\n","import * as React from \"react\";\nimport Layout from \"../components/Layout/layout\";\nimport { HeadFC, PageProps, graphql } from \"gatsby\";\nimport PostPreview from \"../components/PostPreview/postpreview\";\nimport Seo from \"../components/Seo/seo\";\nimport * as styles from \"./blog.module.css\";\nimport { isFeatureToggled } from \"../utils\";\nimport Typography from \"../components/Typography/typography\";\n\nconst TITLE = \"Blog Posts\";\n\nconst BlogPage: React.FC<PageProps<Queries.BlogPageQuery>> = ({ data }) => {\n  return (\n    <Layout pageTitle={TITLE} maxWidth={\"800px\"}>\n      {isFeatureToggled(\"blog_posts\") ? (\n        <div className={styles.cardcontainer}>\n          {data.allMdx.nodes.map((node) => (\n            <PostPreview\n              key={node.id}\n              title={node.frontmatter?.title}\n              date={node.frontmatter?.date}\n              excerpt={node.excerpt}\n              url={`/blog/${node.frontmatter?.slug}`}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className={styles.emptyState}>\n          <Typography variant=\"h2\">\n            No posts to show right now. Come back later.\n          </Typography>\n        </div>\n      )}\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query BlogPage {\n    allMdx(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        frontmatter {\n          date(formatString: \"MMMM D, YYYY\")\n          title\n          slug\n        }\n        id\n        excerpt\n      }\n    }\n  }\n`;\n\nexport default BlogPage;\n\nexport const Head: HeadFC = () => {\n  return (\n    <>\n      <Seo title={TITLE} />\n      <body className={styles.background} />;\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport var background = \"blog-module--background--c2bd2\";\nexport var cardcontainer = \"blog-module--cardcontainer--274a3\";\nexport var emptyState = \"blog-module--empty-state--20a21\";","import config from \"../config.json\";\n\n/**\n * Contains a suite of utility functions\n */\n\n/**\n *\n * @param id The feature toggle id found in config.json\n * @returns a boolean denoting whether the feature is toggled on\n */\nexport function isFeatureToggled(id: string): boolean {\n  const toggles: { [index: string]: any } = config.feature_toggles;\n\n  if (!(id in toggles)) {\n    const errorMsg = `Feature toggle ID \"${id}\" not found in config.`;\n    console.error(errorMsg);\n    throw new Error(errorMsg);\n  }\n\n  return toggles[id];\n}\n"],"names":["_ref","pageTitle","maxWidth","children","React","Navbar","className","style","undefined","Typography","variant","navLinkItem","GITHUB_LINK","config","Link","to","href","target","rel","title","data","useStaticQuery","site","siteMetadata","colorMappings","light","dark","color","rest","variantEl","clickableStyle","cursor","clickable","onClick","date","excerpt","url","Card","handleClick","navigate","TITLE","Layout","isFeatureToggled","allMdx","nodes","map","node","PostPreview","key","id","frontmatter","_node$frontmatter","_node$frontmatter2","_node$frontmatter3","slug","Head","Seo","toggles","errorMsg","console","error","Error"],"sourceRoot":""}